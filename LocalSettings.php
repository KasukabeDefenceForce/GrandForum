<?php

# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
session_start();
error_reporting(E_ALL);
ini_set("display_errors", 1);

header('Cache-Control: no-cache, no-store, must-revalidate');
header('Pragma: no-cache');
header('Expires: 0');

date_default_timezone_set('America/Edmonton');
if( defined( 'MW_INSTALL_PATH' ) ) {
	$IP = MW_INSTALL_PATH;
} else {
	$IP = dirname( __FILE__ );
}

if(file_exists("$IP/test.tmp")){
    define("TESTING", true);
}
else{
    define("TESTING", false);
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );
require_once( "$IP/config/Config.php" );
require_once( "$IP/Classes/Inflect/Inflect.php" );

## Path settings
$wgSitename         = $config->getValue("siteName");
$wgScriptPath       = $config->getValue("path");

## Database settings
$wgDBtype           = $config->getValue("dbType");
$wgDBserver         = $config->getValue("dbServer");
$wgDBname           = $config->getValue("dbName");
$wgTestDBname       = $config->getValue("dbTestName");

## Database credentials
$wgDBuser           = $config->getValue("dbUser");
$wgDBpassword       = $config->getValue("dbPassword");

$wgDBadminuser           = $config->getValue("dbUser");
$wgDBadminpassword       = $config->getValue("dbPassword");

## From MediaWiki manual:
##   "This value is used to generate a persistent cookie
##    for authentication that is resilient to spoofing."
$wgSecretKey = "7b32642dd51dcddf7a65fa3bea2757256caebc0220154c52ec8aebea1b87d7bf";

## Mailing List settings
$wgListAdmins           = $config->getValue("listAdmins");
$wgListAdminPassword    = $config->getValue("listAdminPassword");

$wgFavicon          = "$wgServer$wgScriptPath/favicon.ico";

if(TESTING){
    $wgDBname = $wgTestDBname;
}

# If PHP's memory limit is very low, some operations may fail.
//ini_set( 'memory_limit', '20M' );

if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}
## Uncomment this to disable output compression

# $wgDisableOutputCompression = true;

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL

$wgScriptExtension  = ".php";

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO

$wgEmergencyContact = $config->getValue('supportEmail');
$wgPasswordSender = $config->getValue('siteName').' <'.$config->getValue('supportEmail').'>';

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

# MySQL specific settings
$wgDBprefix         = "mw_";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();
$wgDisableCounters = true;
$wgJobRunRate = 0.01;
$wgSessionsInObjectCache = true;
$wgEnableSidebarCache = true;
if(!file_exists($config->getValue('localizationCache')) && 
   is_writable($config->getValue('localizationCache'))){
    mkdir($config->getValue('localizationCache'));
}
if(file_exists($config->getValue('localizationCache'))){
    $wgCacheDirectory = $config->getValue('localizationCache');
    $wgUseLocalMessageCache = true;
}

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = strtolower( $wgSitename );

$wgLanguageCode = "en";

## Please edit Credentials.php to configure $wgSecretKey.
#$wgSecretKey = "";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
require_once "$IP/skins/cavendish/cavendish.php";
$wgDefaultSkin = 'cavendish';
$wgAllowUserSkin = false;

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );
/*
require_once("$IP/Swift/lib/swift_required.php");

require_once("$IP/extensions/Widgets/Widgets.php");
$wgGroupPermissions['sysop']['editwidgets'] = true;
*/

require_once("$IP/extensions/AnnokiControl/AnnokiControl.php");

$wgRestrictDisplayTitle = false;
$wgLocalTZoffset = date_default_timezone_set("MST") / 60;
$wgRawHtml = true;
$wgEnableUploads       = true;
$wgMaxUploadSize = 1024*1024*20;
ini_set('upload_max_filesize', $wgMaxUploadSize);
$wgFileExtensions = array( 'png', 'jpg', 'jpeg', 'gif', 'tif', 'tiff', 'svg', 'psd', 'pdf', 'ppt', 'pptx', 'xls', 'xlsx', 'tgz', 'zip', 'rar', 'flv', 'mov', 'avi', 'mpeg', 'ogv', 'mp4', 'mkv', 'm4v', 'mp3', 'flac', 'ogg', 'wmv', 'wav', 'txt');
$wgVerifyMimeType = false;
$wgAllowCopyUploads = true;
$wgAllowTitlesInSVG = true;
$wgMaxShellMemory = 402400;
$wgPasswordReminderResendTime = 0.25;
$wgEditPageFrameOptions = 'SAMEORIGIN';
$wgImpersonating = false;
$wgRealUser;

if (($key = array_search('application/zip', $wgMimeTypeBlacklist)) !== false) {
    unset($wgMimeTypeBlacklist[$key]);
}

// Whether or not to show custom deprication notices
define("DEBUG", true);

//Define the switch to prevent any editing by Users to indicate the end of reporting period.
define("FROZEN", false);

$wgRoleValues = array(INACTIVE => 0,
                      HQP => 1,
                      EXTERNAL => 2,
                      ISAC => 3,
                      IAC => 3,
                      CAC => 3,
                      NCE => 4,
                      NI => 5,
                      AR => 5,
                      CI => 6,
                      CHAMP => 7,
                      PL => 9,
                      'PL' => 9,
                      TL => 11,
                      'TL' => 11,
                      RMC => 12,
                      EVALUATOR => 12,
                      BOD => 12,
                      BODC => 13,
                      ASD => 13,
                      SD => 13,
                      GOV => 13,
                      STAFF => 16,
                      MANAGER => 17);

$wgRoles = ($config->hasValue('wgRoles')) ? 
    $config->getValue('wgRoles') : 
    array(HQP, EXTERNAL, ISAC, IAC, CAC, NCE, NI, RMC, BOD, BODC, CHAMP, GOV, ASD, SD, STAFF, MANAGER);

$wgAllRoles = ($config->hasValue('wgAllRoles')) ? 
    $config->getValue('wgAllRoles') :
    array(HQP, STUDENT, EXTERNAL, ISAC, IAC, CAC, NCE, NI, AR, CI, PL, TL, RMC, EVALUATOR, BOD, BODC, CHAMP, GOV, ASD, SD, STAFF, MANAGER);

function unaccentChars($str){
    $normalizeChars = array("'" => '',
        'Š'=>'S', 'š'=>'s', 'Ð'=>'Dj','Ž'=>'Z', 'ž'=>'z', 'À'=>'A', 'Á'=>'A', 'Â'=>'A', 'Ã'=>'A', 'Ä'=>'A',
        'Å'=>'A', 'Æ'=>'A', 'Ç'=>'C', 'È'=>'E', 'É'=>'E', 'Ê'=>'E', 'Ë'=>'E', 'Ì'=>'I', 'Í'=>'I', 'Î'=>'I',
        'Ï'=>'I', 'Ñ'=>'N', 'Ò'=>'O', 'Ó'=>'O', 'Ô'=>'O', 'Õ'=>'O', 'Ö'=>'O', 'Ø'=>'O', 'Ù'=>'U', 'Ú'=>'U',
        'Û'=>'U', 'Ü'=>'U', 'Ý'=>'Y', 'Þ'=>'B', 'ß'=>'Ss','à'=>'a', 'á'=>'a', 'â'=>'a', 'ã'=>'a', 'ä'=>'a',
        'å'=>'a', 'æ'=>'a', 'ç'=>'c', 'è'=>'e', 'é'=>'e', 'ê'=>'e', 'ë'=>'e', 'ì'=>'i', 'í'=>'i', 'î'=>'i',
        'ï'=>'i', 'ð'=>'o', 'ñ'=>'n', 'ò'=>'o', 'ó'=>'o', 'ô'=>'o', 'õ'=>'o', 'ö'=>'o', 'ø'=>'o', 'ù'=>'u',
        'ú'=>'u', 'û'=>'u', 'ý'=>'y', 'ý'=>'y', 'þ'=>'b', 'ÿ'=>'y', 'ƒ'=>'f', 'ü'=>'u'
    );
    return strtolower(strtr($str, $normalizeChars));
}

// Encodes a large json object (usually arrays)
// It still returns a string, but constructs it incrementally
function large_json_encode($data){
    $string = "";
    if(is_object($data)){
        $string .= "{";
    }
    else{
        $string .= "[";
    }
    $first = true;
    foreach($data as $key => $item){
	    if ($first) {
		    $first = false;
	    } else {
		    $string .= ",";
	    }
	    if(is_object($data)){
            $string .= "$key:";
        }
	    $string .= json_encode($item);
    }
    if(is_object($data)){
        $string .= "}";
    }
    else{
        $string .= "]";
    }
    return $string;
}

function array_clean(array $haystack){
    foreach ($haystack as $key => $value) {
        if (is_array($value)) {
            $haystack[$key] = array_clean($value);
        } elseif (is_string($value)) {
            $value = trim($value);
        }

        if (!$value) {
            unset($haystack[$key]);
        }
    }

    return $haystack;
}

/**
 * Returns a 'human readable' date from the given string
 * @param string $time The time in db timestamp format 'YYYY-MM-DD hh-mm-ss'
 * @param strin $format How to format the data (defaults to 'F j, Y')
 * @return string The date in the format 'F j, Y'
 */
function time2date($time, $format='F j, Y'){
    $strtime = strtotime($time);
    return date($format, $strtime);
}

/**
 * Returns a HTML comment with the elapsed time since request.
 * This method has no side effects.
 * @return string
 */
function wfReportTimeOld() {
	global $wgRequestTime, $wgShowHostnames;

	$now = wfTime();
	$elapsed = $now - $wgRequestTime;
    $mem = memory_get_peak_usage(true);
    $bytes = array(1 => 'B', 2 => 'KiB', 3 => 'MiB', 4 => 'GiB');
    $ind = 1;
    while ($mem > 1024 && $ind < count($bytes)) {
	    $mem = $mem / 1024;
	    $ind++;
    }
	

	return $wgShowHostnames
		? sprintf( "<!-- Served by %s in %01.3f secs (%01.1f %s used). -->", wfHostname(), $elapsed, $mem, $bytes[$ind] )
		: sprintf( "<!-- Served in %01.3f secs (%01.1f %s used). -->", $elapsed, $mem, $bytes[$ind] );
}
