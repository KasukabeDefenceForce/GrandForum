<?php

  //require_once '../../testing/MediaWiki_TestCase.php';
require_once '../AnnokiArticleEditor.php';

/**
 * Test class for AnnokiArticleEditor.
 * Generated by PHPUnit on 2009-06-22 at 09:37:33.
 */
class AnnokiArticleEditorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    AnnokiArticleEditor
     * @access protected
     */
    protected $object;
    protected $db = null;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {

      global $wgUser;
      $wgUser = User::newFromId(1);
      $this->object = new AnnokiArticleEditor;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {

    }

    /**
     * @dataProvider createNewArticleProvider
     */
    public function testCreateNewArticle($hasNamespace, $name, $contents, $summary, $userCode, $expectedSuccess) {
      $title = Title::newFromDBkey($name);
      $this->assertNotNull($title, 'Could not create title object named '.$name);
      $article = new Article($title);
      if ($article->exists())
	$article->doDeleteArticle('Removing for testing purposes');
      $this->assertFalse($article->exists(), 'Article already exists and could not be deleted.');

      if ($userCode === 1) //Admin user
	$user = User::newFromId(1);
      else{ //Non-admin user
	$user = User::newFromName('NonAdmin');
	if ($user->getId() == 0)
	  $user = User::createNew('NonAdmin');
      }
      $this->assertNotNull($user, "User (code $userCode) was not created successfully.");
      
      $success = AnnokiArticleEditor::createNewArticle($article, $contents, $summary, $user);
      $errors = $success->getErrorsArray();
      $errorMessage = (count($errors)? count($errors).' error(s). First error: "'.$errors[0].'".':'');
      $this->assertEquals($success->isGood(), $expectedSuccess, $errorMessage);
    
      if ($article->exists()){ //Cleanup
	$article->doDeleteArticle('Cleaning up after test');
	$this->assertFalse($article->exists(), 'Article was not properly cleaned up');
      }
    }

    public function createNewArticleProvider(){
      $noNamespaceArticleName = 'AddTemp';
      $namespaceArticleName = 'Temp:AddTemp';

      $contents = 'I am article contents';
      $summary = 'I\'m a summary';
      $admin = 1;
      $nonAdmin = 2;

      return array(
		   //array(false, $noNamespaceArticleName, $contents, $summary, $admin, true),
		   //array(false, $noNamespaceArticleName, $contents, $summary, $nonAdmin, true),
		   //array(true, $namespaceArticleName, $contents, $summary, $admin, true),
		   //array(true, $namespaceArticleName, $contents, $summary, $nonAdmin, true)
		   );
    }

    /**
     * 
     */
    public function testDeleteArticle() {
      $name = 'DeleteTest';
      $title = Title::newFromDBkey($name);
      $article = new Article($title);
      
      if (!$article->exists()){
	$success = AnnokiArticleEditor::createNewArticle($article);
	$errors = $success->getErrorsArray();
	$errorMessage = (count($errors)? count($errors).' error(s). First error: "'.$errors[0].'".':'');
	$this->assertTrue($success->isGood(), 'Could not create article named '.$name.': '.$errorMessage);
	$this->assertTrue($article->exists(), 'Article was created, but apparently does not exist.');
      }

      $success = AnnokiArticleEditor::deleteArticle($article);
      $this->assertFalse($article->exists(), 'Article was not deleted successfully.');
      $this->assertTrue($success, 'Article was deleted, but return value is incorrect: '.$success);
    }

    /**
     * @todo Implement testReplaceArticleContent().
     */
    public function testReplaceArticleContent() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddLinkToArticle().
     */
    public function testAddLinkToArticle() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testEditArticle().
     */
    public function testEditArticle() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCreateLinkWikitext().
     */
    public function testCreateLinkWikitext() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
