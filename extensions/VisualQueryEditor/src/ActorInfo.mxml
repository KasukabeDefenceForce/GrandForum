<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="330" height="298" 
	name="Actor" showCloseButton="true" close="PopUpManager.removePopUp(this)">
	<mx:Script>
		<![CDATA[
			import mx.controls.Label;
			import mx.controls.CheckBox;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import com.adobe.flex.extras.controls.springgraph.Graph;
			import mx.controls.CheckBox;
			import vqe.*;
			
			private var actorId:int; 
			private var actorName:String; 
			private static var currentNumber:int = 0; 
			
			[Bindable]
			private var app: VisualQueryEditor = VisualQueryEditor(Application.application);
			
		   	[Bindable]
		   	private var propertyInfo:XMLList;
		   	private var relationInfo:XMLList;

			public function setActorInfo(id:int, name:String):void {
				actorId = id;
				actorName = name;
				
				//print conditions
				for (var i:int=0; i<app.getNumConditions(); i++) {
					var label:Label = new Label();
					var cond:Condition = app.getCondition(i);
					label.text = cond.getProperty().getName()+" ";
					label.text += cond.getOperator()+" ";
					label.text += cond.getValue();
					boxConditions.addChild(label);
				}
				
				xmlPropertyService.url = app.getUrlModel()+"?type=property&actor="+id;
				xmlPropertyService.send();
				
				xmlRelationService.url = app.getUrlModel()+"?type=relation&actor="+id;
				xmlRelationService.send();
				
				//load actors in conditions
				var actorArray: Array = app.getActors();	
				var tmpArray: Array = new Array();
				tmpArray.push({label:"[Choose]", data:""});
            	
            	for (var j:int=0; j<actorArray.length; j++) {
            		var tmpActor:Actor = actorArray[j];
            		
            		if (tmpActor.getAlias() != actorName) {
            			tmpArray.push({label:tmpActor.getName()+" "+tmpActor.getAlias(), data:tmpActor.getAlias(), id: tmpActor.getId()});
            		}
            	}
            	cmbActorVal.dataProvider = tmpArray;
			}
			
			public function changeProperty():void {
				//load combo box for operator
	            var operArray:Array = new Array();
				
				if (cmbProperty.selectedItem["type"] == "ordinal") {
            		operArray.push({label:"=", data:"="});
            		operArray.push({label:"!=", data:"!="});
            		operArray.push({label:">", data:">"});
            		operArray.push({label:">=", data:">="});
            		operArray.push({label:"<", data:"<"});
            		operArray.push({label:"<=", data:"<="});
            	} else {
            		operArray.push({label:"=", data:"="});
            		operArray.push({label:"!=", data:"!="});
            		operArray.push({label:"><", data:"><"});
            		operArray.push({label:"<>", data:"<>"});
            	}
            	
            	cmbOperator.dataProvider = operArray;
			}
			
	        public function handleXML(event:ResultEvent):void
            {
                propertyInfo = event.result.property as XMLList; 
                var propertyList:Array = new Array(); 
                propertyList.push({label:"[Choose]", data:""});
                var xmlContent:XML;
                
                for (var i:int=0; i<propertyInfo.length(); i++) {
                	xmlContent = propertyInfo[i];
                	
                	var tmpCheck:CheckBox = new CheckBox();
                	tmpCheck.label = xmlContent.name;
                	tmpCheck.id = xmlContent.id;
                	tmpCheck.data = {id:parseInt(xmlContent.id), name:xmlContent.name, type:xmlContent.type};
                	
                	if (app.getPropertyById(parseInt(xmlContent.id)) != null) {
                		tmpCheck.selected = true;
                	}
                	boxSelect.addChild(tmpCheck);
                	
                	propertyList.push({label:xmlContent.name, data:xmlContent.id, type:xmlContent.type});
                }
                
                cmbProperty.dataProvider = propertyList;
            }


	        public function handleFault(event:FaultEvent):void
	        {
	           Alert.show(event.fault.faultString, "Error retrieving properties");
	        }


			public function handleXMLRel(event:ResultEvent):void
            {
                relationInfo = event.result.relation as XMLList;
                var relationList:Array = new Array();  
                relationList.push({label:"[Choose]", data:""});  
                var xmlContent:XML;
                
                //add undefined relation
                relationList.push({label:"UNDEF", data:"UNDEF", actor1:"", 
                					actor2:"", type:"relation", vartype:""});
                					
                for (var i:int=0; i<relationInfo.length(); i++) {
                	xmlContent = relationInfo[i];
                	
                	var relName:String = xmlContent.name;
                	
                	if (xmlContent.type == "relation-prop") {
                		relName += "."+xmlContent.varname;
                	}
                	
                	var actor1Array:Array = app.getActorsById(xmlContent.actor1);
	            	var actor2Array:Array = app.getActorsById(xmlContent.actor2);
	            	
	            	if (actor1Array.length > 0 && actor2Array.length > 0) {
                		relationList.push({label:relName, data:relName, actor1:xmlContent.actor1, 
                					actor2:xmlContent.actor2, type:xmlContent.type, vartype:xmlContent.vartype});
              		}
                }
                
                cmbRelation.dataProvider = relationList;
            }


	        public function handleFaultRel(event:FaultEvent):void
	        {
	           Alert.show(event.fault.faultString, "Error retrieving relations");
	        }
	        
	        public function handleXMLVal(event:ResultEvent):void
            {
            	propertyInfo = event.result.property as XMLList; 
                var propertyList:Array = new Array(); 
                propertyList.push({label:"[Choose]", data:""});
                var xmlContent:XML;
                
                for (var i:int=0; i<propertyInfo.length(); i++) {
                	xmlContent = propertyInfo[i];
                	
                	propertyList.push({label:xmlContent.name, data:xmlContent.id, type:xmlContent.type});
                }
                
                cmbPropertyVal.dataProvider = propertyList;
	
            }
            
            public function handleFaultVal(event:FaultEvent):void
	        {
	           Alert.show(event.fault.faultString, "Error retrieving properties for condition");
	        }
	        
	        private function addProperties(): void {
				
				var checkBoxes: Array = boxSelect.getChildren();
			
				for (var i:int=0; i<checkBoxes.length; i++) {
					var tmpCheck:CheckBox = checkBoxes[i];
					var id:int = parseInt(tmpCheck.id.toString());
					
					var prop:Property = app.getPropertyById(id);
					var g: Graph = app.getGraph();
					var item: Item;
					
					if (tmpCheck.selected == true && prop == null) {
						//add					
						var tmpProp:Property = new Property(tmpCheck.data["id"], tmpCheck.data["name"], tmpCheck.data["type"], actorName);
						app.addProperty(tmpProp);
						
						item = new NodeItem("p_"+tmpCheck.data["id"], tmpCheck.data["name"], "property");
						app.txt.text+= "\nADD"+tmpCheck.data["name"];
						g.add(item);
						
						app.txt.text += "\n try to find: "+actorName;
						var actor: Item = g.find(actorName);
						g.link(item, actor);
					} else if (tmpCheck.selected == false && prop != null) {
						//remove
						app.removeProperty(prop);
						
						item = g.find("p_"+tmpCheck.data["id"]);
						g.remove(item);
					}
				
				}
				
				app.s.dataProvider = g;
			}
			
			
			public function addCondition(): void {
				
				if (cmbProperty.value != "" && cmbOperator.value != "" && ((txtValue.text != "") || (cmbActorVal.selectedItem["data"] != "" && cmbActorVal.selectedItem["label"] != ""))) {
					currentNumber++;
					
					var tmpCond:Condition = new Condition(new Property(parseInt(cmbProperty.selectedItem["data"]), 
												cmbProperty.selectedItem["label"], cmbProperty.selectedItem["type"], actorName), 
												cmbOperator.value.toString(), currentNumber);
					
					var g: Graph = app.getGraph();

					if (rdb_value1.selected) {
						tmpCond.setConstantValue(txtValue.text.toString());
						
						var item1:Item = new NodeItem("c_"+cmbProperty.selectedItem["label"]+"_"+currentNumber, cmbProperty.selectedItem["label"]+" "+
											cmbOperator.value.toString()+" "+txtValue.text.toString(), "condition");
					
						g.add(item1);
						
						var actor1: Item = g.find(actorName);
						g.link(item1, actor1);
					} else {
						tmpCond.setPropertyValue(cmbActorVal.selectedItem["data"], cmbPropertyVal.selectedItem["label"]);
						
						var item2:Item = new NodeItem("c_"+cmbProperty.selectedItem["label"]+"_"+currentNumber, cmbProperty.selectedItem["label"]+" "+
											cmbOperator.value.toString()+" "+cmbPropertyVal.selectedItem["label"], "condition");
						app.txt.text += cmbProperty.selectedItem["label"]+" "+cmbOperator.value.toString()+" "+cmbPropertyVal.selectedItem["label"];
						g.add(item2);
						
						var actor2: Item = g.find(actorName);
						g.link(item2, actor2);
						
						actor2 = g.find(cmbActorVal.selectedItem["data"]);
						g.link(item2, actor2);
					}
					
					app.addCondition(tmpCond);
					
				}
			}	
			
			
			private function changeConditionVal(): void {	
				if (cmbActorVal.selectedItem["id"] != "") {
					xmlPropValService.url = app.getUrlModel()+"?type=property&actor="+cmbActorVal.selectedItem["id"];
					xmlPropValService.send();
				}
			}
			
			
			
			private function changeRelation(): void {				
				//add items to cmb actor 1
            	var actor1Array:Array = app.getActorsById(cmbRelation.selectedItem["actor1"]);
            	var actor2Array:Array = app.getActorsById(cmbRelation.selectedItem["actor2"]);
            	var relationName:String = cmbRelation.selectedItem["data"];
            	var tmpArray:Array = new Array();
            	
            	if ((actor1Array.length > 0 && actor2Array.length > 0) || (relationName == "UNDEF")) {
	            	
	            	//for undefined relations, load all actors
	            	if (relationName == "UNDEF") {
		            	actor1Array = app.getActors();
		            	actor2Array = app.getActors();	
	            	}
	            	
	            	
	            	for (var j:int=0; j<actor1Array.length; j++) {
	            		var tmpActor1:Actor = actor1Array[j];
	            		tmpArray.push({label:tmpActor1.getName()+" "+tmpActor1.getAlias(), data:tmpActor1.getAlias()});
	            	}
	            	cmbActor1.dataProvider = tmpArray;
	            	
	            	//add items to cmb actor 2
	            	tmpArray = new Array();
	            	
	            	for (j=0; j<actor2Array.length; j++) {
	            		var tmpActor2:Actor = actor2Array[j];
	            		tmpArray.push({label:tmpActor2.getName()+" "+tmpActor2.getAlias(), data:tmpActor2.getAlias()});
	            	}
	            	cmbActor2.dataProvider = tmpArray;
	            	
	            	//load combo box for operator
	            	var operArray:Array = new Array();
	            	if (cmbRelation.selectedItem["vartype"] == "ordinal") {
	            		operArray.push({label:"=", data:"="});
	            		operArray.push({label:"!=", data:"!="});
	            		operArray.push({label:">", data:">"});
	            		operArray.push({label:">=", data:">="});
	            		operArray.push({label:"<", data:"<"});
	            		operArray.push({label:"<=", data:"<="});
	            	} else {
	            		operArray.push({label:"=", data:"="});
	            		operArray.push({label:"!=", data:"!="});
	            		operArray.push({label:"><", data:"><"});
	            		operArray.push({label:"<>", data:"<>"});
	            	}
	            	
	            	cmbOperatorRel.dataProvider = operArray;
	            	
	            	//show/hide fields
	            	if (cmbRelation.selectedItem["type"] == "relation") {
	            		rowOperator.visible = false;
	            		rowProperty.visible = false;
	            		rowSteps.visible = false;
	            		
	            		if (cmbRelation.selectedItem["data"] == "UNDEF") {
	            			rowSteps.visible = true;
	            		}
	            	} else {
	            		rowOperator.visible = true;
	            		rowProperty.visible = true;
	            		rowSteps.visible = false;
	            	}
	            }
	            else {
	            	Alert.show("This relation cannot be chosen because the required actors have not been created", "Error");
	            }
			}
			
			
			private function addRelation(): void {
				
				if (cmbRelation.value != "" && cmbActor1.value != "" && cmbActor2.value != "" && cmbActor1.value != cmbActor2.value)
				{
					var g: Graph = app.getGraph();
					
					var fromItem: Item = g.find(cmbActor1.value.toString());
					var toItem: Item = g.find(cmbActor2.value.toString());
					var relName: String = cmbRelation.value.toString();
					
					if (cmbRelation.selectedItem["data"] == "UNDEF") {
						relName += " ("+stp_step.value+")";
					} 

					//add node for relation
					var item: Item = new NodeItem("r_"+cmbRelation.value+"_"+cmbActor1.value+"_"+cmbActor2.value, 
													relName, "relation");
					var rel:Relation = new Relation(cmbRelation.value.toString(), cmbRelation.selectedItem["type"], cmbActor1.value.toString(), cmbActor2.value.toString());
					
					g.add(item);
					g.link(fromItem, item);
					g.link(toItem, item);
						
					if (cmbRelation.selectedItem["type"] == "relation-prop") {
						rel.addVariable(cmbRelation.selectedItem["vartype"], cmbOperatorRel.value.toString(), txtValueRel.text);
						var itemProp: Item = new NodeItem("p_"+cmbActor1.value.toString() + cmbActor2.value.toString(), 
													cmbOperatorRel.value.toString() +" "+txtValueRel.text, 
													"property");
						g.add(itemProp);
						g.link(itemProp, item);
					}
					
					if (cmbRelation.selectedItem["data"] == "UNDEF") {
						rel.setSteps(stp_step.value);
					} 
					
					app.addRelation(rel);
					
					app.s.dataProvider = g;
				}
				else {
	            	if (cmbActor1.value != "" && cmbActor1.value == cmbActor2.value) {
	            		//Alert.show("Incorrect actors for the relation", "Error");
	            	}
	            }
			}
			
			
			public function viewConditionValue():void {
				if (rdb_value1.selected) {
					rowConstant.visible = true;
					rowPropVal1.visible = false;
					rowPropVal2.visible = false;
				} else {
					rowConstant.visible = false;
					rowPropVal1.visible = true;
					rowPropVal2.visible = true;
				}
			}
			
			
			
			public function saveInfo():void {
				this.addProperties();
				this.addCondition();
				this.addRelation();
				PopUpManager.removePopUp(this);
			}
		]]>
	</mx:Script>

	<mx:HTTPService result="handleXML(event);" fault="handleFault(event);" id="xmlPropertyService" resultFormat="e4x"
    	url="{app.getUrlModel()}" useProxy="false">
	</mx:HTTPService>
	<mx:HTTPService result="handleXMLRel(event);" fault="handleFaultRel(event);" id="xmlRelationService" resultFormat="e4x"
    	url="{app.getUrlModel()}" useProxy="false">
	</mx:HTTPService>
	<mx:HTTPService result="handleXMLVal(event);" fault="handleFaultVal(event);" id="xmlPropValService" resultFormat="e4x"
    	url="{app.getUrlModel()}" useProxy="false">
	</mx:HTTPService>
	<mx:TabBar dataProvider="viewstack1">
	</mx:TabBar>
	<mx:ViewStack id="viewstack1" width="275" height="174" creationPolicy="all">
		<mx:Canvas label="Selection" width="100%" height="100%">
			<mx:VBox x="10" y="10" width="90%" height="155" id="boxSelect">
			</mx:VBox>
			
		</mx:Canvas>
		<mx:Canvas label="Conditions" width="100%" height="100%">
			<mx:Grid x="10" y="10">
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:Grid>
							<mx:GridRow width="100%" height="100%">
								<mx:GridItem width="100%" height="100%">
									<mx:Label text="Property"/>
								</mx:GridItem>
								<mx:GridItem width="100%" height="100%">
									<mx:ComboBox id="cmbProperty" change="changeProperty()"></mx:ComboBox>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow width="100%" height="100%">
								<mx:GridItem width="100%" height="100%">
									<mx:Label text="Operator"/>
								</mx:GridItem>
								<mx:GridItem width="100%" height="100%">
									<mx:ComboBox id="cmbOperator"></mx:ComboBox>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow width="100%" height="100%">
								<mx:GridItem colSpan="2" width="100%" height="100%">
									<mx:RadioButton label="Constant Value" selected="true" id="rdb_value1" groupName="rdb_value" click="viewConditionValue()"/>
									<mx:RadioButton label="Property Value" id="rdb_value2" groupName="rdb_value" click="viewConditionValue()"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow width="100%" height="100%" id="rowConstant">
								<mx:GridItem width="100%" height="100%">
									<mx:Label text="Value"/>
								</mx:GridItem>
								<mx:GridItem width="100%" height="100%">
									<mx:TextInput id="txtValue"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow width="100%" height="100%" id="rowPropVal1" visible="false">
								<mx:GridItem width="100%" height="100%">
									<mx:Label text="Actor"/>
								</mx:GridItem>
								<mx:GridItem width="100%" height="100%">
									<mx:ComboBox id="cmbActorVal" change="changeConditionVal()"></mx:ComboBox>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow width="100%" height="100%" id="rowPropVal2" visible="false">
								<mx:GridItem width="100%" height="100%">
									<mx:Label text="Property"/>
								</mx:GridItem>
								<mx:GridItem width="100%" height="100%">
									<mx:ComboBox id="cmbPropertyVal" change="changeProperty()"></mx:ComboBox>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%" colSpan="2">
						<mx:HRule/>
						
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:VBox id="boxConditions">
						</mx:VBox>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:Canvas>
		<mx:Canvas label="Relations" width="100%" height="100%">
			<mx:Grid x="10" y="10">
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:Label text="Relation"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%">
						<mx:ComboBox id="cmbRelation" change="changeRelation()"></mx:ComboBox>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:Label text="Actor 1"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%">
						<mx:ComboBox id="cmbActor1"></mx:ComboBox>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:Label text="Actor 2"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%">
						<mx:ComboBox id="cmbActor2"></mx:ComboBox>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%" id="rowSteps">
					<mx:GridItem width="100%" height="100%">
						<mx:Label text="Steps"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%">
						<mx:NumericStepper minimum="1" maximum="10" stepSize="1" enabled="true" id="stp_step"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%" id="rowOperator">
					<mx:GridItem width="100%" height="100%">
						<mx:Label text="Operator Prop."/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%">
						<mx:ComboBox id="cmbOperatorRel"></mx:ComboBox>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%" id="rowProperty">
					<mx:GridItem width="100%" height="100%">
						<mx:Label text="Value Property"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%">
						<mx:TextInput id="txtValueRel"/>
					</mx:GridItem>
				</mx:GridRow>

			</mx:Grid>
		</mx:Canvas>
	</mx:ViewStack>
	<mx:ControlBar horizontalAlign="center">
		<mx:Button label="OK" click="saveInfo();"/>
	</mx:ControlBar>
</mx:TitleWindow>
