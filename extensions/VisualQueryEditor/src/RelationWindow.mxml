<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="306" height="220" 
	creationComplete="xmlRelationService.send()" name="Relation" showCloseButton="true" close="PopUpManager.removePopUp(this)">
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			import com.adobe.flex.extras.controls.springgraph.Item;
			import com.adobe.flex.extras.controls.springgraph.Graph;
			import vqe.*;
			
			[Bindable]
			private var app: VisualQueryEditor = VisualQueryEditor(Application.application);
			
		   	[Bindable]
		   	private var relationInfo:XMLList;

	        public function handleXML(event:ResultEvent):void
            {
                relationInfo = event.result.relation as XMLList;
                var relationList:Array = new Array();
                relationList.push({label:"[Choose]", data:""});    
                var xmlContent:XML;
                
                for (var i:int=0; i<relationInfo.length(); i++) {
                	xmlContent = relationInfo[i];
                	
                	var relName:String = xmlContent.name;
                	
                	if (xmlContent.type == "relation-prop") {
                		relName += "."+xmlContent.varname;
                	}
                	
                	var actor1Array:Array = app.getActorsById(xmlContent.actor1);
	            	var actor2Array:Array = app.getActorsById(xmlContent.actor2);
	            	
	            	if (actor1Array.length > 0 && actor2Array.length > 0) {
                		relationList.push({label:relName, data:relName, actor1:xmlContent.actor1, 
                					actor2:xmlContent.actor2, type:xmlContent.type, vartype:xmlContent.vartype});
              		}
                }
                
                cmbRelation.dataProvider = relationList;
            }


	        public function handleFault(event:FaultEvent):void
	        {
	           Alert.show(event.fault.faultString, "Error retrieving relations");
	        }
	        
	        
	        private function addRelation(): void {
				
				app.txt.text += "\n--->"+cmbRelation.value+" ** "+cmbActor1.value+" ** "+cmbActor2.value;
				if (cmbRelation.value != "" && cmbActor1.value != "" && cmbActor2.value != "")
				{
					var g: Graph = app.getGraph();
					
					var fromItem: Item = g.find(cmbActor1.value.toString());
					var toItem: Item = g.find(cmbActor2.value.toString());

					//add node for relation
					var item: Item = new NodeItem("r_"+cmbRelation.value+"_"+cmbActor1.value+"_"+cmbActor2.value, 
													cmbRelation.value.toString(), "relation");
					var rel:Relation = new Relation(cmbRelation.value.toString(), cmbRelation.selectedItem["type"], cmbActor1.value.toString(), cmbActor2.value.toString());
					
					g.add(item);
					g.link(fromItem, item);
					g.link(toItem, item);
						
					if (cmbRelation.selectedItem["type"] == "relation-prop") {
						rel.addVariable(cmbRelation.selectedItem["vartype"], cmbOperator.value.toString(), txtValue.text);
						var itemProp: Item = new NodeItem("p_"+cmbActor1.value.toString() + cmbActor2.value.toString(), 
													cmbOperator.value.toString() +" "+txtValue.text, 
													"property");
						g.add(itemProp);
						g.link(itemProp, item);
					} 
					
					app.addRelation(rel);
					
					app.s.dataProvider = g;
					PopUpManager.removePopUp(this);
				}
				else
				{
					Alert.show("The name for the actor is required", "Error adding actors");
				}
			}	
			
			
			private function changeRelation(): void {				
				//add items to cmb actor 1
            	var actor1Array:Array = app.getActorsById(cmbRelation.selectedItem["actor1"]);
            	var actor2Array:Array = app.getActorsById(cmbRelation.selectedItem["actor2"]);
            	var tmpArray:Array = new Array();
            	
            	if (actor1Array.length > 0 && actor2Array.length > 0) {
	            	for (var j:int=0; j<actor1Array.length; j++) {
	            		var tmpActor1:Actor = actor1Array[j];
	            		tmpArray.push({label:tmpActor1.getName()+" "+tmpActor1.getAlias(), data:tmpActor1.getAlias()});
	            	}
	            	cmbActor1.dataProvider = tmpArray;
	            	
	            	//add items to cmb actor 2
	            	tmpArray = new Array();
	            	
	            	for (j=0; j<actor2Array.length; j++) {
	            		var tmpActor2:Actor = actor2Array[j];
	            		tmpArray.push({label:tmpActor2.getName()+" "+tmpActor2.getAlias(), data:tmpActor2.getAlias()});
	            	}
	            	cmbActor2.dataProvider = tmpArray;
	            	
	            	//load combo box for operator
	            	var operArray:Array = new Array();
	            	if (cmbRelation.selectedItem["vartype"] == "ordinal") {
	            		operArray.push({label:"=", data:"="});
	            		operArray.push({label:"!=", data:"!="});
	            		operArray.push({label:">", data:">"});
	            		operArray.push({label:">=", data:">="});
	            		operArray.push({label:"<", data:"<"});
	            		operArray.push({label:"<=", data:"<="});
	            	} else {
	            		operArray.push({label:"=", data:"="});
	            		operArray.push({label:"!=", data:"!="});
	            		operArray.push({label:"><", data:"><"});
	            		operArray.push({label:"<>", data:"<>"});
	            	}
	            	
	            	cmbOperator.dataProvider = operArray;
	            	
	            	//show/hide fields
	            	if (cmbRelation.selectedItem["type"] == "relation") {
	            		rowOperator.visible = false;
	            		rowProperty.visible = false;
	            	} else {
	            		rowOperator.visible = true;
	            		rowProperty.visible = true;
	            	}
	            }
	            else {
	            	Alert.show("This relation cannot be chosen because the required actors have not been created", "Error");
	            }
			}

		]]>
	</mx:Script>

	<mx:HTTPService result="handleXML(event);" fault="handleFault(event);" id="xmlRelationService" resultFormat="e4x"
    	url="{app.getUrlModel()}?type=relation" useProxy="false">
	</mx:HTTPService>
	
	<mx:Grid x="10" y="10" horizontalAlign="center">
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem width="100%" height="100%">
				<mx:Label text="Relation"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:ComboBox id="cmbRelation" change="changeRelation()"></mx:ComboBox>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem width="100%" height="100%">
				<mx:Label text="Actor 1"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:ComboBox id="cmbActor1"></mx:ComboBox>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem width="100%" height="100%">
				<mx:Label text="Actor 2"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:ComboBox id="cmbActor2"></mx:ComboBox>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" id="rowOperator">
			<mx:GridItem width="100%" height="100%">
				<mx:Label text="Operator Prop."/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:ComboBox id="cmbOperator"></mx:ComboBox>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" id="rowProperty">
			<mx:GridItem width="100%" height="100%">
				<mx:Label text="Value Property"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:TextInput id="txtValue"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem width="100%" height="100%" colSpan="2" horizontalAlign="center">
				<mx:Button label="Add" click="addRelation()"/>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
</mx:TitleWindow>
